
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: awsmachines.infrastructure.crit.sh
spec:
  additionalPrinterColumns:
  - JSONPath: .status.instanceState
    description: EC2 instance state
    name: State
    type: string
  - JSONPath: .status.ready
    description: Machine ready status
    name: Ready
    type: string
  - JSONPath: .spec.providerID
    description: EC2 instance ID
    name: InstanceID
    type: string
  - JSONPath: .metadata.ownerReferences[?(@.kind=="Machine")].name
    description: Machine object which owns with this AWSMachine
    name: Machine
    type: string
  group: infrastructure.crit.sh
  names:
    categories:
    - machine-api
    kind: AWSMachine
    listKind: AWSMachineList
    plural: awsmachines
    singular: awsmachine
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: AWSMachine is the Schema for the awsmachines API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: AWSMachineSpec defines the desired state of AWSMachine
          properties:
            ami:
              type: string
            availabilityZone:
              type: string
            blockDevices:
              items:
                properties:
                  deviceName:
                    type: string
                  encrypted:
                    type: boolean
                  volumeSize:
                    format: int64
                    type: integer
                  volumeType:
                    type: string
                type: object
              type: array
            failureDomain:
              description: 'TODO(chrism): needs to be implemented FailureDomain is
                the failure domain unique identifier this Machine should be attached
                to, as defined in Cluster API. For this infrastructure provider, the
                ID is equivalent to an AWS Availability Zone. If multiple subnets
                are matched for the availability zone, the first one returned is picked.'
              type: string
            iamInstanceProfile:
              type: string
            instanceType:
              type: string
            keyName:
              type: string
            providerID:
              type: string
            publicIP:
              type: boolean
            region:
              type: string
            secretRef:
              description: 'ObjectReference contains enough information to let you
                inspect or modify the referred object. --- New uses of this type are
                discouraged because of difficulty describing its usage when embedded
                in APIs.  1. Ignored fields.  It includes many fields which are not
                generally honored.  For instance, ResourceVersion and FieldPath are
                both very rarely valid in actual usage.  2. Invalid usage help.  It
                is impossible to add specific help for individual usage.  In most
                embedded usages, there are particular     restrictions like, "must
                refer only to types A and B" or "UID not honored" or "name must be
                restricted".     Those cannot be well described when embedded.  3.
                Inconsistent validation.  Because the usages are different, the validation
                rules are different by usage, which makes it hard for users to predict
                what will happen.  4. The fields are both imprecise and overly precise.  Kind
                is not a precise mapping to a URL. This can produce ambiguity     during
                interpretation and require a REST mapping.  In most cases, the dependency
                is on the group,resource tuple     and the version of the actual struct
                is irrelevant.  5. We cannot easily change it.  Because this type
                is embedded in many locations, updates to this type     will affect
                numerous schemas.  Don''t make new APIs embed an underspecified API
                type they do not control. Instead of using this type, create a locally
                provided and used type that is well-focused on your reference. For
                example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                .'
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            securityGroupIDs:
              items:
                type: string
              type: array
            securityGroupNames:
              items:
                type: string
              type: array
            subnetIDs:
              items:
                type: string
              type: array
            tags:
              additionalProperties:
                type: string
              type: object
            vpcID:
              type: string
          type: object
        status:
          description: AWSMachineStatus defines the observed state of AWSMachine
          properties:
            addresses:
              description: Addresses contains the AWS instance associated addresses.
              items:
                description: MachineAddress contains information for the node's address.
                properties:
                  address:
                    description: The machine address.
                    type: string
                  type:
                    description: Machine address type, one of Hostname, ExternalIP
                      or InternalIP.
                    type: string
                required:
                - address
                - type
                type: object
              type: array
            failureMessage:
              description: "FailureMessage will be set in the event that there is
                a terminal problem reconciling the Machine and will contain a more
                verbose string suitable for logging and human consumption. \n This
                field should not be set for transitive errors that a controller faces
                that are expected to be fixed automatically over time (like service
                outages), but instead indicate that something is fundamentally wrong
                with the Machine's spec or the configuration of the controller, and
                that manual intervention is required. Examples of terminal errors
                would be invalid combinations of settings in the spec, values that
                are unsupported by the controller, or the responsible controller itself
                being critically misconfigured. \n Any transient errors that occur
                during the reconciliation of Machines can be added as events to the
                Machine object and/or logged in the controller's output."
              type: string
            failureReason:
              description: "FailureReason will be set in the event that there is a
                terminal problem reconciling the Machine and will contain a succinct
                value suitable for machine interpretation. \n This field should not
                be set for transitive errors that a controller faces that are expected
                to be fixed automatically over time (like service outages), but instead
                indicate that something is fundamentally wrong with the Machine's
                spec or the configuration of the controller, and that manual intervention
                is required. Examples of terminal errors would be invalid combinations
                of settings in the spec, values that are unsupported by the controller,
                or the responsible controller itself being critically misconfigured.
                \n Any transient errors that occur during the reconciliation of Machines
                can be added as events to the Machine object and/or logged in the
                controller's output."
              type: string
            instanceState:
              type: string
            ready:
              description: Ready is true when the provider resource is ready.
              type: boolean
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
